"""
This code file will be to finally try and incorporate a scaled up version of HMC, there are still some issues
since my workflow is very inefficient and so perhaps later refinements can be done but at this stage i just want 
some data as a kind of proof-of-concept and a limited gauge of average error as you try to estimate more parameters, 
as well as gauging runtime (not counting the time taken to incorporate the model into the code).

Active notes:
Starting with N=2, for this there is only theta_0,theta_1,phi_0. For N=3:theta_0-5,phi_0-4
No arccos in pymc math function, Have made a post on the forum. Solution found at https://discourse.pymc.io/t/no-inverse-trig-in-pm-math-functions/13681/3
Have plugged in expressions, busywork done via search and replace, lots of lines of code means file is running slow so maybe it would be worth changing as a python expression but probably won't be necessary since this is only a proof of principle test and i need a much better workflow for this in general.
"""

import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import scipy as sp
import scipy.stats
#import seaborn as sns
import pytensor.tensor as pt

RANDOM_SEED = 0
np.random.seed(RANDOM_SEED)
az.style.use("arviz-darkgrid")


#####################Data generation

Vmax=10
N=50 #Top of page 108 ->N=number of experiments
M=2 #Number of modes


V_2_dist=[np.random.uniform(low=0, high=Vmax,size=N) for i in range(N)].reshape((12,N))
#V_dist+=rng.normal(scale=0.02, size=(12,N)) #Adding gaussian noise, top of page 108 says 2% voltage noise
V_3_dist=[np.random.uniform(low=0, high=Vmax,size=N) for i in range(N)].reshape((5,N))
#V_dist+=rng.normal(scale=0.02, size=(12,N)) #Adding gaussian noise, top of page 108 says 2% voltage noise

#M=2

eta_2_true=[np.random.normal(loc=0.5,scale=0.05) for i in range(2)]
theta_2_true=2*np.acos(np.sqrt(eta_2_true))
a_2_true=[np.random.normal(loc=0,scale=np.pi/200) for i in range(1)]
b_2_true=[np.random.normal(loc=0.7,scale=0.07) for i in range(1)]


eta_2_est=eta_2_true+np.random.normal(loc=0,scale=0.05,size=len(eta_2_true))
#theta_est=2*np.acos(np.sqrt(eta_est))
a_2_est=a_2_true+np.random.normal(loc=0,scale=np.pi/200,size=len(a_2_true))
b_2_est=b_2_true+np.random.normal(loc=0,scale=0.07,size=len(b_2_true))

#M=3

eta_3_true=[np.random.normal(loc=0.5,scale=0.05) for i in range(6)]
theta_3_true=2*np.acos(np.sqrt(eta_3_true))
a_3_true=[np.random.normal(loc=0,scale=np.pi/200) for i in range(5)]
b_3_true=[np.random.normal(loc=0.7,scale=0.07) for i in range(5)]

eta_3_est=eta_3_true+np.random.normal(loc=0,scale=0.05,size=len(eta_3_true))
#theta_3_est=2*np.acos(np.sqrt(eta_3_est))
a_3_est=a_3_true+np.random.normal(loc=0,scale=np.pi/200,size=len(a_3_true))
b_3_est=b_3_true+np.random.normal(loc=0,scale=0.07,size=len(b_3_true))

def DataGen(InputNumber, Voltages, poissonian=True): #InputNumber=# of input photons= should average to about 1000

    #Need to output data/counts, will do through the sympy expressions and substitute in values

    #M=2

    phi_2_true=a_2_true+np.dot(b_2_true,Voltages**2) #phi=a+bV**2
    P_click1_true=-np.sin(theta_2_true[0])*np.sin(theta_2_true[1])*np.cos(phi_2_true)/2 + np.cos(theta_2_true[0])*np.cos(theta_2_true[1])/2 + 1/2
    P_click2_true=-np.cos(theta_2_true[0] - theta_2_true[1])/4 - np.cos(theta_2_true[0] + theta_2_true[1])/4 - np.cos(-phi_2_true + theta_2_true[0] + theta_2_true[1])/8 + np.cos(phi_2_true - theta_2_true[0] + theta_2_true[1])/8 + np.cos(phi_2_true + theta_2_true[0] - theta_2_true[1])/8 - np.cos(phi_2_true + theta_2_true[0] + theta_2_true[1])/8 + 1/2
    P_true=[P_click1_true,P_click2_true]
    P=P_true
    #n=C,p=P,x=array of clicks
    data=scipy.stats.multinomial.rvs(n=InputNumber,p=P_true)
    #Need to add poissonian noise
    #if poissonian==True:
    #    data[i]+=rng.poisson(size=len(data[i]))
    C=np.sum(data)

    #M=3

    phi_3_true=a_3_true+np.dot(b_3_true,Voltages**2) #phi=a+bV**2
    P_click1_true=-4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) + 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) - 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[0] + phi_3_true[2] + phi_3_true[3]) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(phi_3_true[0] - phi_3_true[3])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[2])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] - phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] + phi_3_true[1] - phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2 + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] - phi_3_true[2])*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] - phi_3_true[2])*np.cos(phi_3_true[3] - phi_3_true[4]) - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2 - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[5]/2)**2 + 1
    P_click2_true=4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) + 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) - 2*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[0])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 2*np.sin(phi_3_true[0])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(phi_3_true[0])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[2] + phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] + phi_3_true[4]) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) - 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] - phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] - phi_3_true[3])*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] - phi_3_true[3])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.sin(phi_3_true[0] - phi_3_true[3])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] - phi_3_true[2]) + 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[0]/2)**2 - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[1]/2)**2 + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) - 2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[5]/2)**2
    P_click3_true=(-2*np.cos(theta_3_true[0] - theta_3_true[1]) - 2*np.cos(theta_3_true[0] + theta_3_true[1]) - np.cos(-phi_3_true[0] + theta_3_true[0] + theta_3_true[1]) + np.cos(phi_3_true[0] - theta_3_true[0] + theta_3_true[1]) + np.cos(phi_3_true[0] + theta_3_true[0] - theta_3_true[1]) - np.cos(phi_3_true[0] + theta_3_true[0] + theta_3_true[1]) + 4)*(-2*np.cos(theta_3_true[2] - theta_3_true[3]) - 2*np.cos(theta_3_true[2] + theta_3_true[3]) - np.cos(-phi_3_true[2] + theta_3_true[2] + theta_3_true[3]) + np.cos(phi_3_true[2] - theta_3_true[2] + theta_3_true[3]) + np.cos(phi_3_true[2] + theta_3_true[2] - theta_3_true[3]) - np.cos(phi_3_true[2] + theta_3_true[2] + theta_3_true[3]) + 4)/64
    P_true=[P_click1_true,P_click2_true,P_click3_true]
    P=P_true
    #n=C,p=P,x=array of clicks
    data=scipy.stats.multinomial.rvs(n=InputNumber,p=P_true)
    #Need to add poissonian noise
    #if poissonian==True:
    #    data[i]+=rng.poisson(size=len(data[i]))
    C=np.sum(data)

    return data,C,P

data,C,P=DataGen(InputNumber=1000,Voltages=V_2_dist,poissonian=False)
#data,C,P=DataGen(InputNumber=1000,Voltages=V_3_dist,poissonian=False)

L_dev=4E-9 #delta L, chosen so it coincides with Alex's sd to be ~np.pi/200
wv=1550E-9
a_dev=(2*np.pi*L_dev)/wv

with pm.Model() as model_multinomial:
    #M=2

    # Define priors
    eta=pm.TruncatedNormal("eta",mu=0.5,sigma=0.05,lower=0.0,upper=1.0,initval=eta_2_est,shape=2) #array of 
    theta=2*pt.arccos(pt.sqrt(eta))
    #priors for conciseness
    a=pm.TruncatedNormal("a", mu=0, sigma=a_dev,lower=-np.pi,upper=np.pi,initval=a_2_est)  #array of priors for conciseness
    b=pm.Normal("b", mu=b_2_est, sigma=0.07,initval=b_2_est) #array of priors for conciseness
    
    Volt=pm.Deterministic("Volt",pt.as_tensor(V_2_dist))
    phi=pm.Deterministic("phi",(a+pm.math.dot(b,pm.math.sqr(Volt)))) #still need to find math function so a[1],b[1] and row 1 of Volt is used...etc
    
    p1=pm.Deterministic("p1",-pm.sin(theta[0])*pm.sin(theta[1])*pm.cos(phi)/2 + pm.cos(theta[0])*pm.cos(theta[1])/2 + 1/2)
    p2=pm.Deterministic("p2",-pm.cos(theta[0] - theta[1])/4 - pm.cos(theta[0] + theta[1])/4 - pm.cos(-phi + theta[0] + theta[1])/8 + pm.cos(phi - theta[0] + theta[1])/8 + pm.cos(phi + theta[0] - theta[1])/8 - pm.cos(phi + theta[0] + theta[1])/8 + 1/2)
    
    P=pm.Deterministic("P",pm.math.stack([p1,p2],axis=-1))
    
    likelihood=pm.Multinomial("likelihood",n=C,p=P,shape=(N,M),observed=data)

    #M=3

    # Define priors
    eta=pm.TruncatedNormal("eta",mu=0.5,sigma=0.05,lower=0.0,upper=1.0,initval=eta_3_est,shape=6) #array of 
    theta=2*pt.arccos(pt.sqrt(eta))
    #priors for conciseness
    a=pm.TruncatedNormal("a", mu=0, sigma=a_dev,lower=-np.pi,upper=np.pi,initval=a_3_est,shape=5)  #array of priors for conciseness
    b=pm.Normal("b", mu=b_3_est, sigma=0.07,initval=b_3_est,shape=5) #array of priors for conciseness
    
    Volt=pm.Deterministic("Volt",pt.as_tensor(V_3_dist))
    phi=pm.Deterministic("phi",(a+pm.math.dot(b,pm.math.sqr(Volt)))) #still need to find math function so a[1],b[1] and row 1 of Volt is used...etc
    
    p1=pm.Deterministic("p1",-4*pm.sin(phi[0])*pm.sin(phi[1])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[0])*pm.sin(phi[1])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) + 2*pm.sin(phi[0])*pm.sin(phi[1])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[2] + phi[3]) + 4*pm.sin(phi[0])*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3]) + 4*pm.sin(phi[0])*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) + 4*pm.sin(phi[1])*pm.sin(phi[2])*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[3] - phi[4]) + 4*pm.sin(phi[1])*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[3] - phi[4]) - 4*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) + 2*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(-phi[0] + phi[2] + phi[3]) + 2*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] + phi[3]) - 4*pm.sin(phi[2])*pm.sin(phi[3])*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[1])*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[2])*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[2])*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[2])*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) - 2*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(phi[0] - phi[3])*pm.cos(phi[1])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) - 2*pm.sin(phi[2])*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] - phi[3])*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) + 4*pm.sin(phi[3])*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(phi[2])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) + 4*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) + 4*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.sin(phi[0] + phi[1])*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) + 4*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.sin(phi[0] + phi[1])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) - 2*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(phi[0] + phi[1])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) - 2*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.sin(phi[0] + phi[1] - phi[2])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 2*pm.sin(phi[3])*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(phi[2])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2 - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2 - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2 + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3]) + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3] + phi[4]) - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[1])*pm.cos(phi[3])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] - phi[4]) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[4]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[0]/2)**2 + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3]) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3] + phi[4]) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] - phi[4]) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[0] + phi[1] - phi[3]) - 4*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[0] + phi[1] - phi[3]) + 2*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[0] + phi[1] - phi[3]) + 2*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[0] + phi[1] - phi[3] + phi[4]) + 4*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[3])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[2]) + 4*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[2]) - 2*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.cos(phi[0])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[2]) + 2*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.sin(phi[0] - phi[2])*pm.sin(phi[1] + phi[4])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.cos(phi[1])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[0] - phi[2])*pm.cos(phi[3] - phi[4]) - 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 + 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2 - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2 + 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 - 4*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2 + 4*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[1]/2)**2 - 4*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3]) - 4*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) + 2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) + 2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3] + phi[4]) + 4*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[1])*pm.cos(phi[3])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] - phi[4]) + 2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[4]/2)**2 - 2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - pm.sin(theta[5]/2)**2 + 1)
    p2=pm.Deterministic("p2",4*pm.sin(phi[0])*pm.sin(phi[1])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] + phi[3]) + 4*pm.sin(phi[0])*pm.sin(phi[1])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[2] + phi[3]) - 2*pm.sin(phi[0])*pm.sin(phi[1])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) + 2*pm.sin(phi[0])*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) - 2*pm.sin(phi[0])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) + 2*pm.sin(phi[0])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.sin(phi[2] + phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] + phi[4]) + 2*pm.sin(phi[1])*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[3] - phi[4]) + 2*pm.sin(phi[1])*pm.sin(phi[2])*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[3] - phi[4]) + 4*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] + phi[3]) + 4*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] + phi[3]) - 2*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 2*pm.sin(phi[1])*pm.sin(phi[4])*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[3])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 2*pm.sin(phi[2])*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) - 2*pm.sin(phi[2])*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 2*pm.sin(phi[2])*pm.sin(phi[3])*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[1])*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[2])*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] - phi[3])*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.sin(phi[1] - phi[3])*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.sin(phi[0] - phi[3])*pm.cos(phi[1])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[2])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.sin(phi[0] - phi[3])*pm.cos(phi[1])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) - 4*pm.sin(phi[3])*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(phi[2])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.sin(phi[0] + phi[1])*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 4*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.sin(phi[0] + phi[1])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) + 2*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(phi[0] + phi[1])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2) + 2*pm.sin(phi[3])*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[0] - phi[2]) + 2*pm.sin(phi[3])*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.sin(phi[1] + phi[4])*pm.cos(phi[2])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2) - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2 + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2 - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2 + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)**2 - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3]) - 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3] + phi[4]) + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 8*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[1])*pm.cos(phi[3])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] - phi[4]) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 + 2*pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[0]/2)**2*pm.sin(theta[3]/2)**2 + 4*pm.sin(theta[0]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[4]/2)**2 - 4*pm.sin(theta[0]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[0]/2)**2*pm.sin(theta[5]/2)**2 + pm.sin(theta[0]/2)**2 - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3]) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3] + phi[4]) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] - phi[4]) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.cos(phi[0])*pm.cos(phi[2])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[3]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) - 8*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 4*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 2*pm.sin(theta[0]/2)*pm.sin(theta[1]/2)*pm.cos(phi[0])*pm.cos(theta[0]/2)*pm.cos(theta[1]/2) + 4*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[0] + phi[1] - phi[3]) + 4*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[0] + phi[1] - phi[3]) - 2*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(theta[0]/2)*pm.cos(theta[4]/2)*pm.cos(phi[0] + phi[1] - phi[3]) - 2*pm.sin(theta[0]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(theta[0]/2)*pm.cos(theta[5]/2)*pm.cos(phi[0] + phi[1] - phi[3] + phi[4]) - 4*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[3])*pm.cos(phi[4])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[2]) - 4*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[0])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[2]) + 2*pm.sin(theta[0]/2)*pm.sin(theta[4]/2)*pm.cos(phi[0])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[2]) + 2*pm.sin(theta[0]/2)*pm.sin(theta[5]/2)*pm.cos(phi[0])*pm.cos(phi[1])*pm.cos(phi[3])*pm.cos(theta[0]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] - phi[4]) + 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 - 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[3]/2)**2 - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)**2 + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)**2 - 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) + 4*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[2])*pm.cos(phi[4])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)**2*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.cos(phi[2])*pm.cos(theta[2]/2)*pm.cos(theta[3]/2) - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)**2 + 2*pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2*pm.sin(theta[5]/2)**2 - pm.sin(theta[1]/2)**2*pm.sin(theta[3]/2)**2 + 4*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)**2 - 4*pm.sin(theta[1]/2)**2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) - 2*pm.sin(theta[1]/2)**2*pm.sin(theta[5]/2)**2 + pm.sin(theta[1]/2)**2 + 4*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3]) + 4*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) - 2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[4]/2)*pm.cos(phi[1] - phi[3]) - 2*pm.sin(theta[1]/2)*pm.sin(theta[2]/2)*pm.sin(theta[3]/2)*pm.sin(theta[5]/2)*pm.cos(theta[1]/2)*pm.cos(theta[5]/2)*pm.cos(phi[1] - phi[3] + phi[4]) - 4*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)**2*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 2*pm.sin(theta[1]/2)*pm.sin(theta[4]/2)*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[4]/2)*pm.cos(-phi[1] + phi[2] + phi[3]) + 2*pm.sin(theta[1]/2)*pm.sin(theta[5]/2)*pm.cos(phi[1])*pm.cos(phi[3])*pm.cos(theta[1]/2)*pm.cos(theta[2]/2)*pm.cos(theta[3]/2)*pm.cos(theta[5]/2)*pm.cos(phi[2] - phi[4]) - 2*pm.sin(theta[4]/2)**2*pm.sin(theta[5]/2)**2 + pm.sin(theta[4]/2)**2 + 2*pm.sin(theta[4]/2)*pm.sin(theta[5]/2)*pm.cos(phi[4])*pm.cos(theta[4]/2)*pm.cos(theta[5]/2) + pm.sin(theta[5]/2)**2)
    p3=pm.Deterministic("p3",(-2*pm.cos(theta[0] - theta[1]) - 2*pm.cos(theta[0] + theta[1]) - pm.cos(-phi[0] + theta[0] + theta[1]) + pm.cos(phi[0] - theta[0] + theta[1]) + pm.cos(phi[0] + theta[0] - theta[1]) - pm.cos(phi[0] + theta[0] + theta[1]) + 4)*(-2*pm.cos(theta[2] - theta[3]) - 2*pm.cos(theta[2] + theta[3]) - pm.cos(-phi[2] + theta[2] + theta[3]) + pm.cos(phi[2] - theta[2] + theta[3]) + pm.cos(phi[2] + theta[2] - theta[3]) - pm.cos(phi[2] + theta[2] + theta[3]) + 4)/64)
    
    P=pm.Deterministic("P",pm.math.stack([p1,p2,p3],axis=-1))
    
    likelihood=pm.Multinomial("likelihood",n=C,p=P,shape=(N,M),observed=data)


with model_multinomial:
    trace_multinomial_HMC = pm.sample(draws=int(5e3), chains=4, cores=1,return_inferencedata=True)
    trace_multinomial_Metropolis = pm.sample(draws=int(5e3), chains=4, cores=1, return_inferencedata=True)

#Postprocessing (doing relevant transforms and obtaining things)
#Will need to retransform theta back to reflectivity eta via eta=cos**2(theta/2)
az.calculate_point_estimate()