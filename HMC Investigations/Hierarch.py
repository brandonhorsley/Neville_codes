"""
This code file will be to explore reparameterisation of the problem. Will first see if sampling theta in the pm.sample line works better but i think proper reparameterisation would probably be to set hyperparameters to help explore the posterior distribution

Active notes:
Loosened standard deviation on b from 0.07 to 0.7, too strict priors can penalise inference, was causing energy plot to be way off.
Thought it would run quicker with this change but inference is still running incredibly slow so I will have to proceed with reparameterisation. Done by separating out parameters, so instead of eta=pm.Normal("eta",mu,sigma), you do eta_sep=pm.Normal("eta_sep",0,1) then eta=pm.Deterministic("eta",mu+eta_sep*sigma).
Tried dropping the nuts target_accept to see about speeding up the sim, hit a lot of divergences so not a good call, will leave them in though to identify where the divergences are occurring. Had a run with other 2000 divergences out of 12000, they seem to be all over the place and naturally compromises the entire run, will maybe go back to slowly lowering the target_accept until I can get just a few but maintain the overall integrity of the run. Would also like to test getting sample_stats (idata.sample_stats() should hopefully work). Target_accept of 0.8 and 0.85 seems to be threshold for no divergences.
Would also like to start modelling errors better to help tackle model misspecification, will either use normal or exponential centred on eta,a,b? But still not sure how to handle errors in Voltage measurement since they are data, will have to think around it. Also as part of this I would have to change Multinomial 'n' specification to C rather than 1000.
Tough to tackle divergences since diagnostics don't indicate where they originate so I can't pinpoint where the divergences are aggregating and thus where it is struggling to sample from. Either way it is my intuition that there is a funnel type situation happening, since upping target_accept lowers step size but in doing so means the sampler keeps hitting the max tree depth and even then there are still divergences. So I should continue reparameterising until I find something that works, I think better reflecting voltage errors may work well?

Making voltage errors reflected in the model makes things also tough.

Warning about some parameters having an ESS less than 100 is for the phase shifter that gets omitted from the probability expression.
"""

import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm
import scipy as sp
import scipy.stats
import pytensor.tensor as pt
import multiprocessing

def main():
    cpucount=multiprocessing.cpu_count()
    RANDOM_SEED = 0
    np.random.seed(RANDOM_SEED)
    az.style.use("arviz-darkgrid")


    #####################Data generation

    Vmax=10
    N=100 #Top of page 108 ->N=number of experiments


    V_2_dist=np.random.uniform(low=0, high=Vmax,size=2*N).reshape(2,N)
    #V_dist+=rng.normal(scale=0.02, size=(12,N)) #Adding gaussian noise, top of page 108 says 2% voltage noise
    V_3_dist=np.random.uniform(low=0, high=Vmax,size=6*N).reshape(6,N)
    #V_dist+=rng.normal(scale=0.02, size=(12,N)) #Adding gaussian noise, top of page 108 says 2% voltage noise

    #M=2

    eta_2_true=[np.random.normal(loc=0.5,scale=0.05) for i in range(2)]
    theta_2_true=2*np.arccos(np.sqrt(eta_2_true))
    a_2_true=[np.random.normal(loc=0,scale=np.pi/200) for i in range(2)]
    #print(a_2_true[0])
    b_2_true=[np.random.normal(loc=0.7,scale=0.07) for i in range(2)]


    eta_2_est=eta_2_true+np.random.normal(loc=0,scale=0.05,size=len(eta_2_true))
    #theta_est=2*np.acos(np.sqrt(eta_est))
    a_2_est=a_2_true+np.random.normal(loc=0,scale=np.pi/200,size=len(a_2_true))
    b_2_est=b_2_true+np.random.normal(loc=0,scale=0.07,size=len(b_2_true))

    #M=3

    eta_3_true=[np.random.normal(loc=0.5,scale=0.05) for i in range(6)]
    theta_3_true=2*np.arccos(np.sqrt(eta_3_true))
    a_3_true=[np.random.normal(loc=0,scale=np.pi/200) for i in range(6)]
    b_3_true=[np.random.normal(loc=0.7,scale=0.07) for i in range(6)]

    eta_3_est=eta_3_true+np.random.normal(loc=0,scale=0.05,size=len(eta_3_true))
    #theta_3_est=2*np.acos(np.sqrt(eta_3_est))
    a_3_est=a_3_true+np.random.normal(loc=0,scale=np.pi/200,size=len(a_3_true))
    b_3_est=b_3_true+np.random.normal(loc=0,scale=0.07,size=len(b_3_true))

    def DataGen(InputNumber, Voltages1,Voltages2, poissonian=True): #InputNumber=# of input photons= should average to about 1000

        #M=2

        #phi_2_true=a_2_true+b_2_true*np.square(Voltages1) #phi=a+bV**2
        phi_2_true=np.square(Voltages1)
        #print(phi_2_true)
        for _ in range(len(phi_2_true)):
            phi_2_true[_]= a_2_true[_]+b_2_true[_]*phi_2_true[_]
        
        P_click1_true=-np.sin(theta_2_true[0])*np.sin(theta_2_true[1])*np.cos(phi_2_true[0])/2 + np.cos(theta_2_true[0])*np.cos(theta_2_true[1])/2 + 1/2
        P_click2_true=-np.cos(theta_2_true[0] - theta_2_true[1])/4 - np.cos(theta_2_true[0] + theta_2_true[1])/4 - np.cos(-phi_2_true[0] + theta_2_true[0] + theta_2_true[1])/8 + np.cos(phi_2_true[0] - theta_2_true[0] + theta_2_true[1])/8 + np.cos(phi_2_true[0] + theta_2_true[0] - theta_2_true[1])/8 - np.cos(phi_2_true[0] + theta_2_true[0] + theta_2_true[1])/8 + 1/2
        P_true_2=[P_click1_true,P_click2_true]
        P_2=np.transpose(np.row_stack(P_true_2))
        #n=C,p=P,x=array of clicks
        data_2=[]
        C_2=[]
        for i in range(N):
            data_2.append(scipy.stats.multinomial.rvs(n=InputNumber,p=P_2[i]))
            C_2.append(np.sum(data_2[i]))
        #Need to add poissonian noise
        #if poissonian==True:
        #    data[i]+=rng.poisson(size=len(data[i]))

        #M=3

        phi_3_true=np.square(Voltages2)
        for _ in range(len(phi_3_true)):
            phi_3_true[_]= a_3_true[_]+b_3_true[_]*phi_3_true[_]
        P_click1_true=-4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) + 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) - 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[0] + phi_3_true[2] + phi_3_true[3]) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(phi_3_true[0] - phi_3_true[3])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[2])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] - phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] + phi_3_true[1] - phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2 + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] - phi_3_true[2])*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] - phi_3_true[2])*np.cos(phi_3_true[3] - phi_3_true[4]) - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2 - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[4]/2)**2 - 2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - np.sin(theta_3_true[5]/2)**2 + 1
        P_click2_true=4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) + 4*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) - 2*np.sin(phi_3_true[0])*np.sin(phi_3_true[1])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[0])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 2*np.sin(phi_3_true[0])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(phi_3_true[0])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[2] + phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] + phi_3_true[4]) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) + 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[2])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[3] - phi_3_true[4]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) + 4*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] + phi_3_true[3]) - 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[1])*np.sin(phi_3_true[4])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 2*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(phi_3_true[2])*np.sin(phi_3_true[3])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] - phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] - phi_3_true[3])*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] - phi_3_true[3])*np.cos(phi_3_true[1])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[2])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.sin(phi_3_true[0] - phi_3_true[3])*np.cos(phi_3_true[1])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(phi_3_true[0] + phi_3_true[1])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2) + 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] - phi_3_true[2]) + 2*np.sin(phi_3_true[3])*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.sin(phi_3_true[1] + phi_3_true[4])*np.cos(phi_3_true[2])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)**2 - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[3]/2)**2 + 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[0]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[0]/2)**2 - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[2])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[3]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) - 8*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[1]/2)*np.cos(phi_3_true[0])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[1]/2) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[0] + phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(phi_3_true[4])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) - 4*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[4]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[2]) + 2*np.sin(theta_3_true[0]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[0])*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[0]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[3]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[2])*np.cos(phi_3_true[4])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.cos(phi_3_true[2])*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2*np.sin(theta_3_true[5]/2)**2 - np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[3]/2)**2 + 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)**2 - 4*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) - 2*np.sin(theta_3_true[1]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[1]/2)**2 + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) + 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[4]/2)*np.cos(phi_3_true[1] - phi_3_true[3]) - 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[2]/2)*np.sin(theta_3_true[3]/2)*np.sin(theta_3_true[5]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[1] - phi_3_true[3] + phi_3_true[4]) - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) - 4*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)**2*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[4]/2)*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[4]/2)*np.cos(-phi_3_true[1] + phi_3_true[2] + phi_3_true[3]) + 2*np.sin(theta_3_true[1]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[1])*np.cos(phi_3_true[3])*np.cos(theta_3_true[1]/2)*np.cos(theta_3_true[2]/2)*np.cos(theta_3_true[3]/2)*np.cos(theta_3_true[5]/2)*np.cos(phi_3_true[2] - phi_3_true[4]) - 2*np.sin(theta_3_true[4]/2)**2*np.sin(theta_3_true[5]/2)**2 + np.sin(theta_3_true[4]/2)**2 + 2*np.sin(theta_3_true[4]/2)*np.sin(theta_3_true[5]/2)*np.cos(phi_3_true[4])*np.cos(theta_3_true[4]/2)*np.cos(theta_3_true[5]/2) + np.sin(theta_3_true[5]/2)**2
        P_click3_true=(-2*np.cos(theta_3_true[0] - theta_3_true[1]) - 2*np.cos(theta_3_true[0] + theta_3_true[1]) - np.cos(-phi_3_true[0] + theta_3_true[0] + theta_3_true[1]) + np.cos(phi_3_true[0] - theta_3_true[0] + theta_3_true[1]) + np.cos(phi_3_true[0] + theta_3_true[0] - theta_3_true[1]) - np.cos(phi_3_true[0] + theta_3_true[0] + theta_3_true[1]) + 4)*(-2*np.cos(theta_3_true[2] - theta_3_true[3]) - 2*np.cos(theta_3_true[2] + theta_3_true[3]) - np.cos(-phi_3_true[2] + theta_3_true[2] + theta_3_true[3]) + np.cos(phi_3_true[2] - theta_3_true[2] + theta_3_true[3]) + np.cos(phi_3_true[2] + theta_3_true[2] - theta_3_true[3]) - np.cos(phi_3_true[2] + theta_3_true[2] + theta_3_true[3]) + 4)/64
        P_true_3=[P_click1_true,P_click2_true,P_click3_true]
        P_3=np.transpose(np.row_stack(P_true_3))
        #n=C,p=P,x=array of clicks
        data_3=[]
        C_3=[]
        for i in range(N):
            data_3.append(scipy.stats.multinomial.rvs(n=InputNumber,p=P_3[i]))
            C_3.append(np.sum(data_3[i]))
        #Need to add poissonian noise
        #if poissonian==True:
        #    data[i]+=rng.poisson(size=len(data[i]))

        return data_2,C_2,P_2,data_3,C_3,P_3

    data_2,C_2,P_2,data_3,C_3,P_3=DataGen(InputNumber=1000,Voltages1=V_2_dist,Voltages2 = V_3_dist, poissonian=False)


    L_dev=4E-9 #delta L, chosen so it coincides with Alex's sd to be ~np.pi/200
    wv=1550E-9
    a_dev=(2*np.pi*L_dev)/wv
    
    """
    with pm.Model() as model_multinomial1:
        #M=2

        # Define priors
        #sd=0.05
        eta=pm.TruncatedNormal("eta",mu=0.5,sigma=0.05,lower=0.0,upper=1.0,initval=[0.5,0.5],shape=2) #array of 
        theta=pm.Deterministic("theta",2*pt.arccos(pt.sqrt(eta)))
        #priors for conciseness
        #sd=a_dev
        a=pm.TruncatedNormal("a", mu=0, sigma=a_dev,lower=-np.pi,upper=np.pi,initval=[0,0],shape=2)  #array of priors for conciseness
        #sd=0.07
        b=pm.Normal("b", mu=b_2_est, sigma=0.7,initval=[0.7,0.7],shape=2) #array of priors for conciseness
        
        Volt=pm.Deterministic("Volt",pt.as_tensor(V_2_dist))
        
        phi=pm.Deterministic("phi",a[:,None]+b[:,None]*pm.math.sqr(Volt))
        
        #phi1 vanishes from p expression under simplification
        p1=pm.Deterministic("p1",-pm.math.sin(theta[0])*pm.math.sin(theta[1])*pm.math.cos(phi[0])/2 + pm.math.cos(theta[0])*pm.math.cos(theta[1])/2 + 1/2)
        p2=pm.Deterministic("p2",-pm.math.cos(theta[0] - theta[1])/4 - pm.math.cos(theta[0] + theta[1])/4 - pm.math.cos(-phi[0] + theta[0] + theta[1])/8 + pm.math.cos(phi[0] - theta[0] + theta[1])/8 + pm.math.cos(phi[0] + theta[0] - theta[1])/8 - pm.math.cos(phi[0] + theta[0] + theta[1])/8 + 1/2)

        P=pm.Deterministic("P",pm.math.stack([p1,p2],axis=-1))
        likelihood=pm.Multinomial("likelihood",n=1000,p=P[0],shape=(N,2),observed=data_2)
    """

    with pm.Model() as model_multinomial1:
        #M=2

        # Define priors
        #sd=0.05
        eta_sep=pm.TruncatedNormal("eta_sep",mu=0,sigma=1,lower=0.0,upper=1.0,shape=2) #array of
        eta=pm.Deterministic("eta",[0.5,0.5]+eta_sep*0.05)
        theta=pm.Deterministic("theta",2*pt.arccos(pt.sqrt(eta)))
        #priors for conciseness

        #sd=a_dev
        a_sep=pm.TruncatedNormal("a_sep", mu=0, sigma=1,lower=-np.pi,upper=np.pi, shape=2)  #array of priors for conciseness
        a=pm.Deterministic("a",[0,0]+a_sep*a_dev)

        sd=0.7
        b_sep=pm.Normal("b_sep", mu=0, sigma=1,shape=2) #array of priors for conciseness
        b=pm.Deterministic("b",[0.7,0.7]+b_sep*sd)

        #Have decided to open the Volt variable to allow additional freedom
        Volt=pm.Normal("Volt",mu=V_2_dist,sigma=0.1)
        #Volt=pm.Deterministic("Volt",pt.as_tensor(V_2_dist))
        
        phi=pm.Deterministic("phi",a[:,None]+b[:,None]*pm.math.sqr(Volt))
        
        #phi1 vanishes from p expression under simplification
        p1=pm.Deterministic("p1",-pm.math.sin(theta[0])*pm.math.sin(theta[1])*pm.math.cos(phi[0])/2 + pm.math.cos(theta[0])*pm.math.cos(theta[1])/2 + 1/2)
        p2=pm.Deterministic("p2",-pm.math.cos(theta[0] - theta[1])/4 - pm.math.cos(theta[0] + theta[1])/4 - pm.math.cos(-phi[0] + theta[0] + theta[1])/8 + pm.math.cos(phi[0] - theta[0] + theta[1])/8 + pm.math.cos(phi[0] + theta[0] - theta[1])/8 - pm.math.cos(phi[0] + theta[0] + theta[1])/8 + 1/2)

        P=pm.Deterministic("P",pm.math.stack([p1,p2],axis=-1))
        likelihood=pm.Multinomial("likelihood",n=1000,p=P[0],shape=(N,2),observed=data_2)
    
    with pm.Model() as model_multinomial2:
        #M=3

        # Define priors
        eta_sep=pm.TruncatedNormal("eta_sep",mu=0,sigma=1,lower=0.0,upper=1.0,shape=6) #array of
        eta=pm.Deterministic("eta",[0.5,0.5,0.5,0.5,0.5,0.5]+eta_sep*0.05)
        theta=pm.Deterministic("theta",2*pt.arccos(pt.sqrt(eta)))
        #priors for conciseness

        #sd=a_dev
        a_sep=pm.TruncatedNormal("a_sep", mu=0, sigma=1,lower=-np.pi,upper=np.pi, shape=6)  #array of priors for conciseness
        a=pm.Deterministic("a",[0,0,0,0,0,0]+a_sep*a_dev)

        sd=0.7
        #b can seem to become quite sharp or different distributions having different widths? Plus lack of agreement between chains
        b_sep=pm.Normal("b_sep", mu=0, sigma=1,shape=6) #array of priors for conciseness
        b=pm.Deterministic("b",[0.5,0.5,0.5,0.5,0.5,0.5]+b_sep*sd)
        
        #Volt=pm.Deterministic("Volt",pt.as_tensor(V_3_dist))
        Volt=pm.Normal("Volt",mu=V_3_dist,sigma=0.1) #This really brutalises the output
        phi=pm.Deterministic("phi",a[:,None]+b[:,None]*pm.math.sqr(Volt))

        p1=pm.Deterministic("p1",-4*pm.math.sin(phi[0])*pm.math.sin(phi[1])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[0])*pm.math.sin(phi[1])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) + 2*pm.math.sin(phi[0])*pm.math.sin(phi[1])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[2] + phi[3]) + 4*pm.math.sin(phi[0])*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3]) + 4*pm.math.sin(phi[0])*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) + 4*pm.math.sin(phi[1])*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[3] - phi[4]) + 4*pm.math.sin(phi[1])*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[3] - phi[4]) - 4*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(-phi[0] + phi[2] + phi[3]) + 2*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] + phi[3]) - 4*pm.math.sin(phi[2])*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[1])*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[2])*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[2])*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[2])*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) - 2*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(phi[0] - phi[3])*pm.math.cos(phi[1])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) - 2*pm.math.sin(phi[2])*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] - phi[3])*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[2])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.sin(phi[0] + phi[1])*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.sin(phi[0] + phi[1])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) - 2*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(phi[0] + phi[1])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) - 2*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[0] + phi[1] - phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(phi[3])*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[2])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2 - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2 - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2 + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3]) + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3] + phi[4]) - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[1])*pm.math.cos(phi[3])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] - phi[4]) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[4]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[0]/2)**2 + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3]) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3] + phi[4]) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] - phi[4]) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[0] + phi[1] - phi[3]) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[0] + phi[1] - phi[3]) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[0] + phi[1] - phi[3]) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[0] + phi[1] - phi[3] + phi[4]) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[3])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[2]) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[2]) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[2]) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[0] - phi[2])*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[1])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[0] - phi[2])*pm.math.cos(phi[3] - phi[4]) - 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 + 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2 - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2 + 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 - 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2 + 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[1]/2)**2 - 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3]) - 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) + 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) + 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3] + phi[4]) + 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[1])*pm.math.cos(phi[3])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] - phi[4]) + 2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[4]/2)**2 - 2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - pm.math.sin(theta[5]/2)**2 + 1)
        p2=pm.Deterministic("p2",4*pm.math.sin(phi[0])*pm.math.sin(phi[1])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] + phi[3]) + 4*pm.math.sin(phi[0])*pm.math.sin(phi[1])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[2] + phi[3]) - 2*pm.math.sin(phi[0])*pm.math.sin(phi[1])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) + 2*pm.math.sin(phi[0])*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) - 2*pm.math.sin(phi[0])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(phi[0])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[2] + phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] + phi[4]) + 2*pm.math.sin(phi[1])*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[3] - phi[4]) + 2*pm.math.sin(phi[1])*pm.math.sin(phi[2])*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[3] - phi[4]) + 4*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] + phi[3]) + 4*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] + phi[3]) - 2*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(phi[1])*pm.math.sin(phi[4])*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[3])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(phi[2])*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) - 2*pm.math.sin(phi[2])*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(phi[2])*pm.math.sin(phi[3])*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[1])*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] - phi[3])*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] - phi[3])*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.sin(phi[0] - phi[3])*pm.math.cos(phi[1])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[2])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.sin(phi[0] - phi[3])*pm.math.cos(phi[1])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) - 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[2])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.sin(phi[0] + phi[1])*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.sin(phi[0] + phi[1])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) + 2*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(phi[0] + phi[1])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2) + 2*pm.math.sin(phi[3])*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[0] - phi[2]) + 2*pm.math.sin(phi[3])*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.sin(phi[1] + phi[4])*pm.math.cos(phi[2])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2) - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2 + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2 - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2 + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)**2 - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3]) - 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3] + phi[4]) + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 8*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[1])*pm.math.cos(phi[3])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] - phi[4]) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 + 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[3]/2)**2 + 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[4]/2)**2 - 4*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[0]/2)**2*pm.math.sin(theta[5]/2)**2 + pm.math.sin(theta[0]/2)**2 - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3]) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3] + phi[4]) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] - phi[4]) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[2])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[3]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) - 8*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[1]/2)*pm.math.cos(phi[0])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[1]/2) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[0] + phi[1] - phi[3]) + 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[0] + phi[1] - phi[3]) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[0]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[0] + phi[1] - phi[3]) - 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[0]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[0] + phi[1] - phi[3] + phi[4]) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[3])*pm.math.cos(phi[4])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[2]) - 4*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[0])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[2]) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[2]) + 2*pm.math.sin(theta[0]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[0])*pm.math.cos(phi[1])*pm.math.cos(phi[3])*pm.math.cos(theta[0]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] - phi[4]) + 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 - 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[3]/2)**2 - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)**2 + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)**2 - 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) + 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[2])*pm.math.cos(phi[4])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.cos(phi[2])*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2) - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)**2 + 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2*pm.math.sin(theta[5]/2)**2 - pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[3]/2)**2 + 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)**2 - 4*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) - 2*pm.math.sin(theta[1]/2)**2*pm.math.sin(theta[5]/2)**2 + pm.math.sin(theta[1]/2)**2 + 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3]) + 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) - 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(phi[1] - phi[3]) - 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[2]/2)*pm.math.sin(theta[3]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[1] - phi[3] + phi[4]) - 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) - 4*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)**2*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[4]/2)*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[4]/2)*pm.math.cos(-phi[1] + phi[2] + phi[3]) + 2*pm.math.sin(theta[1]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[1])*pm.math.cos(phi[3])*pm.math.cos(theta[1]/2)*pm.math.cos(theta[2]/2)*pm.math.cos(theta[3]/2)*pm.math.cos(theta[5]/2)*pm.math.cos(phi[2] - phi[4]) - 2*pm.math.sin(theta[4]/2)**2*pm.math.sin(theta[5]/2)**2 + pm.math.sin(theta[4]/2)**2 + 2*pm.math.sin(theta[4]/2)*pm.math.sin(theta[5]/2)*pm.math.cos(phi[4])*pm.math.cos(theta[4]/2)*pm.math.cos(theta[5]/2) + pm.math.sin(theta[5]/2)**2)
        p3=pm.Deterministic("p3",(-2*pm.math.cos(theta[0] - theta[1]) - 2*pm.math.cos(theta[0] + theta[1]) - pm.math.cos(-phi[0] + theta[0] + theta[1]) + pm.math.cos(phi[0] - theta[0] + theta[1]) + pm.math.cos(phi[0] + theta[0] - theta[1]) - pm.math.cos(phi[0] + theta[0] + theta[1]) + 4)*(-2*pm.math.cos(theta[2] - theta[3]) - 2*pm.math.cos(theta[2] + theta[3]) - pm.math.cos(-phi[2] + theta[2] + theta[3]) + pm.math.cos(phi[2] - theta[2] + theta[3]) + pm.math.cos(phi[2] + theta[2] - theta[3]) - pm.math.cos(phi[2] + theta[2] + theta[3]) + 4)/64)
        
        P=pm.Deterministic("P",pm.math.stack([p1,p2,p3],axis=-1))
        
        likelihood=pm.Multinomial("likelihood",n=1000,p=P[0],shape=(N,3),observed=data_3)
    

    #print(model_multinomial1.free_RVs)
    
    with model_multinomial1:
        #Need to index model variables like a dictionary due to shared RV names between models, easier to index than rewrite
        stepmethod=[pm.NUTS([model_multinomial1['a_sep']]),pm.NUTS([model_multinomial1['a_sep'],model_multinomial1['b_sep']]),pm.NUTS([model_multinomial1['a_sep'],model_multinomial1['b_sep'],model_multinomial1['eta_sep']])]

        trace_multinomial_2_HMC = pm.sample(draws=int(1e3), chains=4, cores=cpucount,step=stepmethod, return_inferencedata=True)
        #trace_multinomial_2_Metropolis = pm.sample(draws=int(1e3), step=pm.Metropolis(),chains=4, cores=cpucount, return_inferencedata=True)

    #{'target_accept':0.85}
    
    with model_multinomial2:

        stepmethod=[pm.NUTS([model_multinomial2['a_sep']]),pm.NUTS([model_multinomial2['a_sep'],model_multinomial2['b_sep']]),pm.NUTS([model_multinomial2['a_sep'],model_multinomial2['b_sep'],model_multinomial2['eta_sep']])]

        trace_multinomial_3_HMC = pm.sample(draws=int(1e3), chains=4, cores=cpucount,step=stepmethod,return_inferencedata=True)
        #trace_multinomial_3_Metropolis = pm.sample(draws=int(1e3), step=pm.Metropolis(),chains=4, cores=cpucount, return_inferencedata=True)
    

    az.plot_trace(data=trace_multinomial_2_HMC,var_names=["eta","a","b"],divergences=True)
    az.plot_energy(data=trace_multinomial_2_HMC)
    az.plot_pair(trace_multinomial_2_HMC, var_names=["eta","a","b"], divergences=True)
    print(az.summary(data=trace_multinomial_2_HMC,var_names=["eta","a","b"]))
    
    #az.plot_trace(data=trace_multinomial_2_Metropolis,var_names=["eta","a","b"],divergences=None)
    #az.plot_pair(trace_multinomial_2_Metropolis, var_names=["eta","a","b"], divergences=True)
    #print(az.summary(data=trace_multinomial_2_Metropolis,var_names=["eta","a","b"]))

    
    az.plot_trace(data=trace_multinomial_3_HMC,var_names=["eta","a","b"],divergences=None)
    az.plot_energy(data=trace_multinomial_3_HMC)
    az.plot_pair(trace_multinomial_3_HMC, var_names=["eta","a","b"], divergences=True)
    print(az.summary(data=trace_multinomial_3_HMC,var_names=["eta","a","b"]))
    
    #az.plot_trace(data=trace_multinomial_3_Metropolis,var_names=["eta","a","b"],divergences=None)
    #az.plot_pair(trace_multinomial_3_Metropolis, var_names=["eta","a","b"], divergences=True)
    #print(az.summary(data=trace_multinomial_3_Metropolis, var_names=["eta","a","b"]))
    
    data=trace_multinomial_3_HMC.sample_stats
    
    print(data['tree_depth'])
    
if __name__=='__main__':
    main()